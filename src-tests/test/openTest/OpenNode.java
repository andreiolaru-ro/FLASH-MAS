package test.openTest;

import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Timer;
import java.util.TimerTask;

import net.xqhs.flash.core.CategoryName;
import net.xqhs.flash.core.DeploymentConfiguration;
import net.xqhs.flash.core.DeploymentConfiguration.CtxtTriple;
import net.xqhs.flash.core.node.Node;
import net.xqhs.flash.core.util.MultiTreeMap;
import net.xqhs.util.logging.UnitComponent;

public class OpenNode extends Node {
	
	public OpenNode(MultiTreeMap configuration) {
		super(configuration);
	}
	
	@Override
	public boolean start() {
		super.start();
		
		Timer timer = new Timer();
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				timer.cancel();
				doTest();
			}
		}, 1000);
		
		return true;
	}
	
	protected void doTest() {
		String[] argset = ("-package example -loader agent:Simple -agent composite:AgentC -shard messaging -shard PingTest otherAgent:agentD "
				+ "-shard EchoTesting " + "-agent agentD parameter:one classpath:example.echoAgent.EchoAgent")
						.split(" ");
		MultiTreeMap tree = new MultiTreeMap();
		CtxtTriple ctx = new CtxtTriple(CategoryName.DEPLOYMENT.s(), null, tree);
		DeploymentConfiguration.readCLIArgs(Arrays.asList(argset).iterator(), ctx, tree, new LinkedList<>(),
				new HashMap<>(), new UnitComponent("test"));
		dynamicLoad(tree);
	}
}
